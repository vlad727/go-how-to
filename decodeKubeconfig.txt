package main

import (
	b64 "encoding/base64"
	"fmt"
	"log"
	"os"
	"slices"
	"strings"
)

var (
	CA  = "certificate-authority-data:"
	TLS = "client-certificate-data:"
	KEY = "client-key-data:"
)

func convertBase64(x string) string { //take string decode and return string
	sDec, _ := b64.StdEncoding.DecodeString(x) //decode base64

	return string(sDec)

}

func main() {
	//create directory
	// if it already exist exit with status 1
	err := os.Mkdir("certs", 0755)

	if err != nil {
		log.Fatal(err)
	}

	// get file
	if len(os.Args) <= 1 {
		fmt.Printf("USAGE : %s <target_filename> \n", os.Args[0])
		os.Exit(0)
	}
	fileName := os.Args[1]

	//read data from file
	dataFile, err := os.ReadFile(fileName)
	if err != nil {
		log.Println("Step read file")
		fmt.Println(err)
		os.Exit(1)
	}
	//covert uint8 to slice
	slicestrDataFromFile := strings.Fields(string(dataFile))

	// check file is it correct (contain CA TLS and KEY?)
	containsCA := slices.Contains(slicestrDataFromFile, CA)
	containsTLS := slices.Contains(slicestrDataFromFile, TLS)
	containsKEY := slices.Contains(slicestrDataFromFile, KEY)
	if containsCA && containsTLS && containsKEY {

		log.Println("found:", CA, TLS, KEY)

	} else {
		fmt.Println("File does not contain: ", CA, TLS, KEY)
		os.Exit(1)
	}

	// find CA TLC cert and TLC key by size
	for _, el := range slicestrDataFromFile {

		if len(el) > 1000 {
			//fmt.Println(el)
			decodedOutput := convertBase64(el)

			//createFiles(decodedOutput)
			fmt.Println(decodedOutput)

		}

	}

}
